// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pc2sms.proto

#include "pc2sms.pb.h"
#include "pc2sms.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pc2sms {

static const char* sms_method_names[] = {
  "/pc2sms.sms/requestToSend",
  "/pc2sms.sms/listenSMSToSend",
};

std::unique_ptr< sms::Stub> sms::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< sms::Stub> stub(new sms::Stub(channel));
  return stub;
}

sms::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_requestToSend_(sms_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_listenSMSToSend_(sms_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status sms::Stub::requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::pc2sms::ResponseCommand* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_requestToSend_, context, request, response);
}

void sms::Stub::experimental_async::requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestToSend_, context, request, response, std::move(f));
}

void sms::Stub::experimental_async::requestToSend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pc2sms::ResponseCommand* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_requestToSend_, context, request, response, std::move(f));
}

void sms::Stub::experimental_async::requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestToSend_, context, request, response, reactor);
}

void sms::Stub::experimental_async::requestToSend(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::pc2sms::ResponseCommand* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_requestToSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>* sms::Stub::AsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pc2sms::ResponseCommand>::Create(channel_.get(), cq, rpcmethod_requestToSend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>* sms::Stub::PrepareAsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::pc2sms::ResponseCommand>::Create(channel_.get(), cq, rpcmethod_requestToSend_, context, request, false);
}

::grpc::ClientReader< ::pc2sms::SMS>* sms::Stub::listenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::pc2sms::SMS>::Create(channel_.get(), rpcmethod_listenSMSToSend_, context, request);
}

void sms::Stub::experimental_async::listenSMSToSend(::grpc::ClientContext* context, ::pc2sms::Credentials* request, ::grpc::experimental::ClientReadReactor< ::pc2sms::SMS>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::pc2sms::SMS>::Create(stub_->channel_.get(), stub_->rpcmethod_listenSMSToSend_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pc2sms::SMS>* sms::Stub::AsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pc2sms::SMS>::Create(channel_.get(), cq, rpcmethod_listenSMSToSend_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pc2sms::SMS>* sms::Stub::PrepareAsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::pc2sms::SMS>::Create(channel_.get(), cq, rpcmethod_listenSMSToSend_, context, request, false, nullptr);
}

sms::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sms_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< sms::Service, ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>(
          [](sms::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pc2sms::RequestCommand* req,
             ::pc2sms::ResponseCommand* resp) {
               return service->requestToSend(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      sms_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< sms::Service, ::pc2sms::Credentials, ::pc2sms::SMS>(
          [](sms::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::pc2sms::Credentials* req,
             ::grpc_impl::ServerWriter<::pc2sms::SMS>* writer) {
               return service->listenSMSToSend(ctx, req, writer);
             }, this)));
}

sms::Service::~Service() {
}

::grpc::Status sms::Service::requestToSend(::grpc::ServerContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status sms::Service::listenSMSToSend(::grpc::ServerContext* context, const ::pc2sms::Credentials* request, ::grpc::ServerWriter< ::pc2sms::SMS>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pc2sms

