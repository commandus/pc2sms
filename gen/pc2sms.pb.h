// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pc2sms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pc2sms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pc2sms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pc2sms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pc2sms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pc2sms_2eproto;
namespace pc2sms {
class Credentials;
class CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class RequestCommand;
class RequestCommandDefaultTypeInternal;
extern RequestCommandDefaultTypeInternal _RequestCommand_default_instance_;
class ResponseCommand;
class ResponseCommandDefaultTypeInternal;
extern ResponseCommandDefaultTypeInternal _ResponseCommand_default_instance_;
class SMS;
class SMSDefaultTypeInternal;
extern SMSDefaultTypeInternal _SMS_default_instance_;
}  // namespace pc2sms
PROTOBUF_NAMESPACE_OPEN
template<> ::pc2sms::Credentials* Arena::CreateMaybeMessage<::pc2sms::Credentials>(Arena*);
template<> ::pc2sms::RequestCommand* Arena::CreateMaybeMessage<::pc2sms::RequestCommand>(Arena*);
template<> ::pc2sms::ResponseCommand* Arena::CreateMaybeMessage<::pc2sms::ResponseCommand>(Arena*);
template<> ::pc2sms::SMS* Arena::CreateMaybeMessage<::pc2sms::SMS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pc2sms {

// ===================================================================

class Credentials PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pc2sms.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {};
  virtual ~Credentials();

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Credentials& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Credentials* New() const final {
    return CreateMaybeMessage<Credentials>(nullptr);
  }

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Credentials& from);
  void MergeFrom(const Credentials& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pc2sms.Credentials";
  }
  protected:
  explicit Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pc2sms_2eproto);
    return ::descriptor_table_pc2sms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string login = 1;
  void clear_login();
  const std::string& login() const;
  void set_login(const std::string& value);
  void set_login(std::string&& value);
  void set_login(const char* value);
  void set_login(const char* value, size_t size);
  std::string* mutable_login();
  std::string* release_login();
  void set_allocated_login(std::string* login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_login(
      std::string* login);
  private:
  const std::string& _internal_login() const;
  void _internal_set_login(const std::string& value);
  std::string* _internal_mutable_login();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:pc2sms.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pc2sms_2eproto;
};
// -------------------------------------------------------------------

class SMS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pc2sms.SMS) */ {
 public:
  inline SMS() : SMS(nullptr) {};
  virtual ~SMS();

  SMS(const SMS& from);
  SMS(SMS&& from) noexcept
    : SMS() {
    *this = ::std::move(from);
  }

  inline SMS& operator=(const SMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMS& operator=(SMS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SMS* internal_default_instance() {
    return reinterpret_cast<const SMS*>(
               &_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SMS& a, SMS& b) {
    a.Swap(&b);
  }
  inline void Swap(SMS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SMS* New() const final {
    return CreateMaybeMessage<SMS>(nullptr);
  }

  SMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SMS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SMS& from);
  void MergeFrom(const SMS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pc2sms.SMS";
  }
  protected:
  explicit SMS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pc2sms_2eproto);
    return ::descriptor_table_pc2sms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string phone = 1;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_phone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_phone(
      std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:pc2sms.SMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pc2sms_2eproto;
};
// -------------------------------------------------------------------

class RequestCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pc2sms.RequestCommand) */ {
 public:
  inline RequestCommand() : RequestCommand(nullptr) {};
  virtual ~RequestCommand();

  RequestCommand(const RequestCommand& from);
  RequestCommand(RequestCommand&& from) noexcept
    : RequestCommand() {
    *this = ::std::move(from);
  }

  inline RequestCommand& operator=(const RequestCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestCommand& operator=(RequestCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestCommand* internal_default_instance() {
    return reinterpret_cast<const RequestCommand*>(
               &_RequestCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestCommand& a, RequestCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestCommand* New() const final {
    return CreateMaybeMessage<RequestCommand>(nullptr);
  }

  RequestCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestCommand& from);
  void MergeFrom(const RequestCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pc2sms.RequestCommand";
  }
  protected:
  explicit RequestCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pc2sms_2eproto);
    return ::descriptor_table_pc2sms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 1,
    kSmsFieldNumber = 2,
  };
  // .pc2sms.Credentials credentials = 1;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::pc2sms::Credentials& credentials() const;
  ::pc2sms::Credentials* release_credentials();
  ::pc2sms::Credentials* mutable_credentials();
  void set_allocated_credentials(::pc2sms::Credentials* credentials);
  private:
  const ::pc2sms::Credentials& _internal_credentials() const;
  ::pc2sms::Credentials* _internal_mutable_credentials();
  public:
  void unsafe_arena_set_allocated_credentials(
      ::pc2sms::Credentials* credentials);
  ::pc2sms::Credentials* unsafe_arena_release_credentials();

  // .pc2sms.SMS sms = 2;
  bool has_sms() const;
  private:
  bool _internal_has_sms() const;
  public:
  void clear_sms();
  const ::pc2sms::SMS& sms() const;
  ::pc2sms::SMS* release_sms();
  ::pc2sms::SMS* mutable_sms();
  void set_allocated_sms(::pc2sms::SMS* sms);
  private:
  const ::pc2sms::SMS& _internal_sms() const;
  ::pc2sms::SMS* _internal_mutable_sms();
  public:
  void unsafe_arena_set_allocated_sms(
      ::pc2sms::SMS* sms);
  ::pc2sms::SMS* unsafe_arena_release_sms();

  // @@protoc_insertion_point(class_scope:pc2sms.RequestCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pc2sms::Credentials* credentials_;
  ::pc2sms::SMS* sms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pc2sms_2eproto;
};
// -------------------------------------------------------------------

class ResponseCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pc2sms.ResponseCommand) */ {
 public:
  inline ResponseCommand() : ResponseCommand(nullptr) {};
  virtual ~ResponseCommand();

  ResponseCommand(const ResponseCommand& from);
  ResponseCommand(ResponseCommand&& from) noexcept
    : ResponseCommand() {
    *this = ::std::move(from);
  }

  inline ResponseCommand& operator=(const ResponseCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseCommand& operator=(ResponseCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResponseCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseCommand* internal_default_instance() {
    return reinterpret_cast<const ResponseCommand*>(
               &_ResponseCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseCommand& a, ResponseCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseCommand* New() const final {
    return CreateMaybeMessage<ResponseCommand>(nullptr);
  }

  ResponseCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResponseCommand& from);
  void MergeFrom(const ResponseCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pc2sms.ResponseCommand";
  }
  protected:
  explicit ResponseCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pc2sms_2eproto);
    return ::descriptor_table_pc2sms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pc2sms.ResponseCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pc2sms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Credentials

// string login = 1;
inline void Credentials::clear_login() {
  login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Credentials::login() const {
  // @@protoc_insertion_point(field_get:pc2sms.Credentials.login)
  return _internal_login();
}
inline void Credentials::set_login(const std::string& value) {
  _internal_set_login(value);
  // @@protoc_insertion_point(field_set:pc2sms.Credentials.login)
}
inline std::string* Credentials::mutable_login() {
  // @@protoc_insertion_point(field_mutable:pc2sms.Credentials.login)
  return _internal_mutable_login();
}
inline const std::string& Credentials::_internal_login() const {
  return login_.Get();
}
inline void Credentials::_internal_set_login(const std::string& value) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Credentials::set_login(std::string&& value) {
  
  login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pc2sms.Credentials.login)
}
inline void Credentials::set_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pc2sms.Credentials.login)
}
inline void Credentials::set_login(const char* value,
    size_t size) {
  
  login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pc2sms.Credentials.login)
}
inline std::string* Credentials::_internal_mutable_login() {
  
  return login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Credentials::release_login() {
  // @@protoc_insertion_point(field_release:pc2sms.Credentials.login)
  return login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credentials::set_allocated_login(std::string* login) {
  if (login != nullptr) {
    
  } else {
    
  }
  login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pc2sms.Credentials.login)
}
inline std::string* Credentials::unsafe_arena_release_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pc2sms.Credentials.login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Credentials::unsafe_arena_set_allocated_login(
    std::string* login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (login != nullptr) {
    
  } else {
    
  }
  login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.Credentials.login)
}

// string password = 2;
inline void Credentials::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Credentials::password() const {
  // @@protoc_insertion_point(field_get:pc2sms.Credentials.password)
  return _internal_password();
}
inline void Credentials::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:pc2sms.Credentials.password)
}
inline std::string* Credentials::mutable_password() {
  // @@protoc_insertion_point(field_mutable:pc2sms.Credentials.password)
  return _internal_mutable_password();
}
inline const std::string& Credentials::_internal_password() const {
  return password_.Get();
}
inline void Credentials::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Credentials::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pc2sms.Credentials.password)
}
inline void Credentials::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pc2sms.Credentials.password)
}
inline void Credentials::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pc2sms.Credentials.password)
}
inline std::string* Credentials::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Credentials::release_password() {
  // @@protoc_insertion_point(field_release:pc2sms.Credentials.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Credentials::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pc2sms.Credentials.password)
}
inline std::string* Credentials::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pc2sms.Credentials.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Credentials::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.Credentials.password)
}

// -------------------------------------------------------------------

// SMS

// string phone = 1;
inline void SMS::clear_phone() {
  phone_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SMS::phone() const {
  // @@protoc_insertion_point(field_get:pc2sms.SMS.phone)
  return _internal_phone();
}
inline void SMS::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:pc2sms.SMS.phone)
}
inline std::string* SMS::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:pc2sms.SMS.phone)
  return _internal_mutable_phone();
}
inline const std::string& SMS::_internal_phone() const {
  return phone_.Get();
}
inline void SMS::_internal_set_phone(const std::string& value) {
  
  phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SMS::set_phone(std::string&& value) {
  
  phone_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pc2sms.SMS.phone)
}
inline void SMS::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pc2sms.SMS.phone)
}
inline void SMS::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pc2sms.SMS.phone)
}
inline std::string* SMS::_internal_mutable_phone() {
  
  return phone_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SMS::release_phone() {
  // @@protoc_insertion_point(field_release:pc2sms.SMS.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SMS::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pc2sms.SMS.phone)
}
inline std::string* SMS::unsafe_arena_release_phone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pc2sms.SMS.phone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return phone_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SMS::unsafe_arena_set_allocated_phone(
    std::string* phone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      phone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.SMS.phone)
}

// string message = 2;
inline void SMS::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SMS::message() const {
  // @@protoc_insertion_point(field_get:pc2sms.SMS.message)
  return _internal_message();
}
inline void SMS::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:pc2sms.SMS.message)
}
inline std::string* SMS::mutable_message() {
  // @@protoc_insertion_point(field_mutable:pc2sms.SMS.message)
  return _internal_mutable_message();
}
inline const std::string& SMS::_internal_message() const {
  return message_.Get();
}
inline void SMS::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SMS::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:pc2sms.SMS.message)
}
inline void SMS::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:pc2sms.SMS.message)
}
inline void SMS::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:pc2sms.SMS.message)
}
inline std::string* SMS::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SMS::release_message() {
  // @@protoc_insertion_point(field_release:pc2sms.SMS.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SMS::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:pc2sms.SMS.message)
}
inline std::string* SMS::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:pc2sms.SMS.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SMS::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.SMS.message)
}

// -------------------------------------------------------------------

// RequestCommand

// .pc2sms.Credentials credentials = 1;
inline bool RequestCommand::_internal_has_credentials() const {
  return this != internal_default_instance() && credentials_ != nullptr;
}
inline bool RequestCommand::has_credentials() const {
  return _internal_has_credentials();
}
inline void RequestCommand::clear_credentials() {
  if (GetArena() == nullptr && credentials_ != nullptr) {
    delete credentials_;
  }
  credentials_ = nullptr;
}
inline const ::pc2sms::Credentials& RequestCommand::_internal_credentials() const {
  const ::pc2sms::Credentials* p = credentials_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pc2sms::Credentials*>(
      &::pc2sms::_Credentials_default_instance_);
}
inline const ::pc2sms::Credentials& RequestCommand::credentials() const {
  // @@protoc_insertion_point(field_get:pc2sms.RequestCommand.credentials)
  return _internal_credentials();
}
inline void RequestCommand::unsafe_arena_set_allocated_credentials(
    ::pc2sms::Credentials* credentials) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credentials_);
  }
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.RequestCommand.credentials)
}
inline ::pc2sms::Credentials* RequestCommand::release_credentials() {
  auto temp = unsafe_arena_release_credentials();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pc2sms::Credentials* RequestCommand::unsafe_arena_release_credentials() {
  // @@protoc_insertion_point(field_release:pc2sms.RequestCommand.credentials)
  
  ::pc2sms::Credentials* temp = credentials_;
  credentials_ = nullptr;
  return temp;
}
inline ::pc2sms::Credentials* RequestCommand::_internal_mutable_credentials() {
  
  if (credentials_ == nullptr) {
    auto* p = CreateMaybeMessage<::pc2sms::Credentials>(GetArena());
    credentials_ = p;
  }
  return credentials_;
}
inline ::pc2sms::Credentials* RequestCommand::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable:pc2sms.RequestCommand.credentials)
  return _internal_mutable_credentials();
}
inline void RequestCommand::set_allocated_credentials(::pc2sms::Credentials* credentials) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete credentials_;
  }
  if (credentials) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(credentials);
    if (message_arena != submessage_arena) {
      credentials = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credentials, submessage_arena);
    }
    
  } else {
    
  }
  credentials_ = credentials;
  // @@protoc_insertion_point(field_set_allocated:pc2sms.RequestCommand.credentials)
}

// .pc2sms.SMS sms = 2;
inline bool RequestCommand::_internal_has_sms() const {
  return this != internal_default_instance() && sms_ != nullptr;
}
inline bool RequestCommand::has_sms() const {
  return _internal_has_sms();
}
inline void RequestCommand::clear_sms() {
  if (GetArena() == nullptr && sms_ != nullptr) {
    delete sms_;
  }
  sms_ = nullptr;
}
inline const ::pc2sms::SMS& RequestCommand::_internal_sms() const {
  const ::pc2sms::SMS* p = sms_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pc2sms::SMS*>(
      &::pc2sms::_SMS_default_instance_);
}
inline const ::pc2sms::SMS& RequestCommand::sms() const {
  // @@protoc_insertion_point(field_get:pc2sms.RequestCommand.sms)
  return _internal_sms();
}
inline void RequestCommand::unsafe_arena_set_allocated_sms(
    ::pc2sms::SMS* sms) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_);
  }
  sms_ = sms;
  if (sms) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pc2sms.RequestCommand.sms)
}
inline ::pc2sms::SMS* RequestCommand::release_sms() {
  auto temp = unsafe_arena_release_sms();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::pc2sms::SMS* RequestCommand::unsafe_arena_release_sms() {
  // @@protoc_insertion_point(field_release:pc2sms.RequestCommand.sms)
  
  ::pc2sms::SMS* temp = sms_;
  sms_ = nullptr;
  return temp;
}
inline ::pc2sms::SMS* RequestCommand::_internal_mutable_sms() {
  
  if (sms_ == nullptr) {
    auto* p = CreateMaybeMessage<::pc2sms::SMS>(GetArena());
    sms_ = p;
  }
  return sms_;
}
inline ::pc2sms::SMS* RequestCommand::mutable_sms() {
  // @@protoc_insertion_point(field_mutable:pc2sms.RequestCommand.sms)
  return _internal_mutable_sms();
}
inline void RequestCommand::set_allocated_sms(::pc2sms::SMS* sms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sms_;
  }
  if (sms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sms);
    if (message_arena != submessage_arena) {
      sms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms, submessage_arena);
    }
    
  } else {
    
  }
  sms_ = sms;
  // @@protoc_insertion_point(field_set_allocated:pc2sms.RequestCommand.sms)
}

// -------------------------------------------------------------------

// ResponseCommand

// int32 count = 1;
inline void ResponseCommand::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseCommand::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResponseCommand::count() const {
  // @@protoc_insertion_point(field_get:pc2sms.ResponseCommand.count)
  return _internal_count();
}
inline void ResponseCommand::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ResponseCommand::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:pc2sms.ResponseCommand.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pc2sms

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pc2sms_2eproto
