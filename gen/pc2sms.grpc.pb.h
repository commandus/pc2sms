// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pc2sms.proto
#ifndef GRPC_pc2sms_2eproto__INCLUDED
#define GRPC_pc2sms_2eproto__INCLUDED

#include "pc2sms.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace pc2sms {

class sms final {
 public:
  static constexpr char const* service_full_name() {
    return "pc2sms.sms";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::pc2sms::ResponseCommand* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>> AsyncrequestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>>(AsyncrequestToSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>> PrepareAsyncrequestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>>(PrepareAsyncrequestToSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pc2sms::SMS>> listenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pc2sms::SMS>>(listenSMSToSendRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>> AsynclistenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>>(AsynclistenSMSToSendRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>> PrepareAsynclistenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>>(PrepareAsynclistenSMSToSendRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void listenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials* request, ::grpc::ClientReadReactor< ::pc2sms::SMS>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>* AsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pc2sms::ResponseCommand>* PrepareAsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pc2sms::SMS>* listenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>* AsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pc2sms::SMS>* PrepareAsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::pc2sms::ResponseCommand* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>> AsyncrequestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>>(AsyncrequestToSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>> PrepareAsyncrequestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>>(PrepareAsyncrequestToSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pc2sms::SMS>> listenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pc2sms::SMS>>(listenSMSToSendRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pc2sms::SMS>> AsynclistenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pc2sms::SMS>>(AsynclistenSMSToSendRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pc2sms::SMS>> PrepareAsynclistenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pc2sms::SMS>>(PrepareAsynclistenSMSToSendRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, std::function<void(::grpc::Status)>) override;
      void requestToSend(::grpc::ClientContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response, ::grpc::ClientUnaryReactor* reactor) override;
      void listenSMSToSend(::grpc::ClientContext* context, const ::pc2sms::Credentials* request, ::grpc::ClientReadReactor< ::pc2sms::SMS>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>* AsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pc2sms::ResponseCommand>* PrepareAsyncrequestToSendRaw(::grpc::ClientContext* context, const ::pc2sms::RequestCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pc2sms::SMS>* listenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request) override;
    ::grpc::ClientAsyncReader< ::pc2sms::SMS>* AsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pc2sms::SMS>* PrepareAsynclistenSMSToSendRaw(::grpc::ClientContext* context, const ::pc2sms::Credentials& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_requestToSend_;
    const ::grpc::internal::RpcMethod rpcmethod_listenSMSToSend_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status requestToSend(::grpc::ServerContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response);
    virtual ::grpc::Status listenSMSToSend(::grpc::ServerContext* context, const ::pc2sms::Credentials* request, ::grpc::ServerWriter< ::pc2sms::SMS>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestToSend() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestToSend(::grpc::ServerContext* context, ::pc2sms::RequestCommand* request, ::grpc::ServerAsyncResponseWriter< ::pc2sms::ResponseCommand>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistenSMSToSend(::grpc::ServerContext* context, ::pc2sms::Credentials* request, ::grpc::ServerAsyncWriter< ::pc2sms::SMS>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_requestToSend<WithAsyncMethod_listenSMSToSend<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_requestToSend() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pc2sms::RequestCommand* request, ::pc2sms::ResponseCommand* response) { return this->requestToSend(context, request, response); }));}
    void SetMessageAllocatorFor_requestToSend(
        ::grpc::MessageAllocator< ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestToSend(
      ::grpc::CallbackServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pc2sms::Credentials, ::pc2sms::SMS>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pc2sms::Credentials* request) { return this->listenSMSToSend(context, request); }));
    }
    ~WithCallbackMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pc2sms::SMS>* listenSMSToSend(
      ::grpc::CallbackServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_requestToSend<WithCallbackMethod_listenSMSToSend<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestToSend() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestToSend() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestToSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlistenSMSToSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_requestToSend() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestToSend(context, request, response); }));
    }
    ~WithRawCallbackMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestToSend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->listenSMSToSend(context, request); }));
    }
    ~WithRawCallbackMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* listenSMSToSend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestToSend() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pc2sms::RequestCommand, ::pc2sms::ResponseCommand>* streamer) {
                       return this->StreamedrequestToSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::RequestCommand* /*request*/, ::pc2sms::ResponseCommand* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestToSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pc2sms::RequestCommand,::pc2sms::ResponseCommand>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_requestToSend<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_listenSMSToSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_listenSMSToSend() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pc2sms::Credentials, ::pc2sms::SMS>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pc2sms::Credentials, ::pc2sms::SMS>* streamer) {
                       return this->StreamedlistenSMSToSend(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_listenSMSToSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status listenSMSToSend(::grpc::ServerContext* /*context*/, const ::pc2sms::Credentials* /*request*/, ::grpc::ServerWriter< ::pc2sms::SMS>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedlistenSMSToSend(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pc2sms::Credentials,::pc2sms::SMS>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_listenSMSToSend<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_requestToSend<WithSplitStreamingMethod_listenSMSToSend<Service > > StreamedService;
};

}  // namespace pc2sms


#endif  // GRPC_pc2sms_2eproto__INCLUDED
